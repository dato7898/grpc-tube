// Code generated by sqlc. DO NOT EDIT.
// source: video.sql

package db

import (
	"context"
	"database/sql"
)

const createVideo = `-- name: CreateVideo :one
INSERT INTO "video" (
    id,
    title,
    description
) VALUES (
    $1, $2, $3
) RETURNING id, title, description, views
`

type CreateVideoParams struct {
	ID          string         `json:"id"`
	Title       sql.NullString `json:"title"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) CreateVideo(ctx context.Context, arg CreateVideoParams) (Video, error) {
	row := q.db.QueryRowContext(ctx, createVideo, arg.ID, arg.Title, arg.Description)
	var i Video
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Views,
	)
	return i, err
}

const getAll = `-- name: GetAll :many
SELECT id, title, description, views FROM "video"
LIMIT $1
OFFSET $2
`

type GetAllParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAll(ctx context.Context, arg GetAllParams) ([]Video, error) {
	rows, err := q.db.QueryContext(ctx, getAll, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Video{}
	for rows.Next() {
		var i Video
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Views,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
