// Code generated by sqlc. DO NOT EDIT.
// source: auth_token.sql

package db

import (
	"context"
)

const createAuthToken = `-- name: CreateAuthToken :exec
INSERT INTO "auth_token" (
    user_id,
    code
) VALUES (
    $1, $2
)
`

type CreateAuthTokenParams struct {
	UserID int64  `json:"user_id"`
	Code   string `json:"code"`
}

func (q *Queries) CreateAuthToken(ctx context.Context, arg CreateAuthTokenParams) error {
	_, err := q.db.ExecContext(ctx, createAuthToken, arg.UserID, arg.Code)
	return err
}

const getLastAuthTokenByUserId = `-- name: GetLastAuthTokenByUserId :one
SELECT id, user_id, code, expired_at FROM "auth_token"
WHERE user_id = $1
ORDER BY expired_at DESC
LIMIT 1
`

func (q *Queries) GetLastAuthTokenByUserId(ctx context.Context, userID int64) (AuthToken, error) {
	row := q.db.QueryRowContext(ctx, getLastAuthTokenByUserId, userID)
	var i AuthToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Code,
		&i.ExpiredAt,
	)
	return i, err
}
